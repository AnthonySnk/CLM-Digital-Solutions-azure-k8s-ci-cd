trigger:
- master

resources:
- repo: self

stages:
- stage: Test_stage
  displayName: Test stage
  jobs:  
  - job: Test
    displayName: 'Testing'
    pool:
      name: 'Default'
    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            make test-app
        continueOnError: false

- stage: Docker_stage
  displayName: Image building
  jobs:  
  - job: Docker
    displayName: 'Building'
    pool:
      name: 'Default'
    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            make build-image
          failOnStderr: true

- stage: Terraform_stage
  displayName: Creating rbac with terraform
  jobs:  
  - job: Before_k8s
    displayName: 'Building'
    pool:
      name: 'Default'
    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            make terraform
          failOnStderr: false

- stage: Deploy_stage
  displayName: Kubernetes deployment
  jobs:
    - deployment: Deploy
      displayName: Kubernetes deployment job
      pool:
        name: 'Default'
      environment: 'kc'
      strategy: 
        runOnce:
          deploy:          
            pool: 'Default'  
            steps:
                - task: CmdLine@2
                  inputs:
                    script: |
                      make deploy_k8s_aws
                    failOnStderr: true
                  continueOnError: false
          on:
            failure:         
              pool: 'Default'           
              steps:
                - task: CmdLine@2
                  inputs:
                    script: |
                      echo Puesto que falló el despliegue, empezamos a revirtir todo
                      make destroy
                  continueOnError: false
            success:          
              pool: 'Default'           
              steps:
              - task: CmdLine@2
                inputs:
                  script: |
                    echo "===================================================================================================="
                    echo Se acaba de generar un despliegue en EKS fargate desde un agente que contiene todas las dependencias\n
                    echo y puesto que no tuve tiempo para implemnetar ingress con helm puedes testear la aplicación así!
                    kubectl run -i --tty busybox --image=busybox --restart=Never -- /bin/sh -c "for i in {1..4}; do curl http://app-node-svc:3000"; done
                    echo "======================================================================================================"
